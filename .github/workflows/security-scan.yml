name: Security Audit Scan

on:
  # Run on every push to main/master and develop branches
  push:
    branches:
      - main
      - master
      - develop
  
  # Run on pull requests
  pull_request:
    types: [opened, synchronize, reopened]
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
          - hephaestus
      
      target_branch:
        description: 'Branch to scan'
        required: false
        default: 'main'
        type: string
  
  # Scheduled daily scan at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  security-scan:
    name: AI Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          ref: ${{ github.event.inputs.target_branch || github.ref }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov safety bandit
      
      - name: Run Pre-scan Checks
        run: |
          # Check for sensitive data
          echo "Checking for sensitive data..."
          git secrets --scan || true
          
          # Check dependencies for vulnerabilities
          echo "Checking dependencies..."
          safety check --json || true
      
      - name: Determine Scan Type
        id: scan-config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            SCAN_TYPE="comprehensive"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SCAN_TYPE="standard"
          else
            SCAN_TYPE="quick"
          fi
          echo "scan_type=$SCAN_TYPE" >> $GITHUB_OUTPUT
          echo "Running $SCAN_TYPE security scan..."
      
      - name: Execute Security Scan
        id: security-scan
        env:
          SCAN_TYPE: ${{ steps.scan-config.outputs.scan_type }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create scan request
          SCAN_ID=$(uuidgen)
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Call AI Security API
          RESPONSE=$(aws lambda invoke \
            --function-name ai-security-analyzer \
            --payload '{
              "action": "scan",
              "scan_type": "'$SCAN_TYPE'",
              "repository_url": "'$REPO_URL'",
              "branch": "${{ github.ref_name }}",
              "commit_sha": "${{ github.sha }}",
              "scan_id": "'$SCAN_ID'",
              "github_context": {
                "event_name": "${{ github.event_name }}",
                "pr_number": "${{ github.event.pull_request.number }}",
                "actor": "${{ github.actor }}"
              }
            }' \
            --cli-binary-format raw-in-base64-out \
            response.json)
          
          # Parse response
          cat response.json
          echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
      
      - name: Wait for Scan Completion
        id: scan-status
        run: |
          SCAN_ID="${{ steps.security-scan.outputs.scan_id }}"
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws dynamodb get-item \
              --table-name security-scan-results \
              --key '{"scan_id": {"S": "'$SCAN_ID'"}}' \
              --query 'Item.status.S' \
              --output text)
            
            if [[ "$STATUS" == "completed" || "$STATUS" == "failed" ]]; then
              echo "Scan $STATUS"
              echo "status=$STATUS" >> $GITHUB_OUTPUT
              break
            fi
            
            echo "Scan status: $STATUS (attempt $ATTEMPT/$MAX_ATTEMPTS)"
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done
      
      - name: Retrieve Scan Results
        if: steps.scan-status.outputs.status == 'completed'
        id: results
        run: |
          SCAN_ID="${{ steps.security-scan.outputs.scan_id }}"
          
          # Get full results
          aws dynamodb get-item \
            --table-name security-scan-results \
            --key '{"scan_id": {"S": "'$SCAN_ID'"}}' \
            --output json > scan-results.json
          
          # Extract summary
          CRITICAL=$(jq -r '.Item.findings.M.critical.N // "0"' scan-results.json)
          HIGH=$(jq -r '.Item.findings.M.high.N // "0"' scan-results.json)
          MEDIUM=$(jq -r '.Item.findings.M.medium.N // "0"' scan-results.json)
          LOW=$(jq -r '.Item.findings.M.low.N // "0"' scan-results.json)
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT
          
          # Generate report
          python -m cli.ai_security report --scan-id $SCAN_ID --format markdown > security-report.md
      
      - name: Upload SARIF Results
        if: steps.scan-status.outputs.status == 'completed'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scan-results.sarif
          category: ai-security-audit
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.scan-status.outputs.status == 'completed'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            const critical = '${{ steps.results.outputs.critical }}';
            const high = '${{ steps.results.outputs.high }}';
            const medium = '${{ steps.results.outputs.medium }}';
            const low = '${{ steps.results.outputs.low }}';
            
            const summary = `## üîê AI Security Audit Results
            
            **Scan Type:** ${{ steps.scan-config.outputs.scan_type }}
            **Status:** ‚úÖ Completed
            
            ### Finding Summary:
            - üî¥ **Critical:** ${critical}
            - üü† **High:** ${high}
            - üü° **Medium:** ${medium}
            - üü¢ **Low:** ${low}
            
            <details>
            <summary>View Full Report</summary>
            
            ${report}
            
            </details>
            
            ---
            *Generated by AI Security Audit Framework*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: Fail on Critical/High Findings
        if: steps.scan-status.outputs.status == 'completed'
        run: |
          CRITICAL=${{ steps.results.outputs.critical }}
          HIGH=${{ steps.results.outputs.high }}
          
          if [[ $CRITICAL -gt 0 || $HIGH -gt 0 ]]; then
            echo "‚ùå Security scan failed: Found $CRITICAL critical and $HIGH high severity findings"
            exit 1
          else
            echo "‚úÖ Security scan passed"
          fi
      
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            scan-results.json
            security-report.md
            scan-results.sarif
          retention-days: 30
      
      - name: Send Notifications
        if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
        run: |
          # Send SNS notification for failures on main branches
          aws sns publish \
            --topic-arn ${{ secrets.SECURITY_ALERTS_SNS_TOPIC }} \
            --subject "Security Scan Failed - ${{ github.repository }}" \
            --message "Security scan failed for ${{ github.repository }} on branch ${{ github.ref_name }}. 
            
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Critical findings: ${{ steps.results.outputs.critical }}
            High findings: ${{ steps.results.outputs.high }}
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  hephaestus-cognitive-scan:
    name: Hephaestus Cognitive Analysis
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.scan_type == 'hephaestus')
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Trigger Hephaestus Analysis
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Trigger Hephaestus cognitive scan
          aws lambda invoke \
            --function-name ai-security-analyzer \
            --payload '{
              "action": "hephaestus_cognitive",
              "repository_url": "'$REPO_URL'",
              "branch": "${{ github.ref_name }}",
              "deep_analysis": true,
              "evolution_enabled": true
            }' \
            --cli-binary-format raw-in-base64-out \
            hephaestus-response.json
          
          cat hephaestus-response.json
      
      - name: Store Evolution Insights
        run: |
          # Extract and store cognitive insights for future evolution
          jq -r '.cognitive_insights' hephaestus-response.json > cognitive-insights.json
          
          # Upload to S3 for persistence
          aws s3 cp cognitive-insights.json \
            s3://${{ secrets.SECURITY_INSIGHTS_BUCKET }}/hephaestus/${{ github.repository }}/${{ github.sha }}/insights.json