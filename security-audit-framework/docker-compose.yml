version: '3.8'

services:
  # LocalStack for AWS services emulation
  localstack:
    image: localstack/localstack:latest
    container_name: saf-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=s3,dynamodb,lambda,sqs,sns,cloudformation,iam,sts,ssm,secretsmanager
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - saf-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: saf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - saf-network

  # PostgreSQL for application data
  postgres:
    image: postgres:15-alpine
    container_name: saf-postgres
    environment:
      - POSTGRES_USER=saf_user
      - POSTGRES_PASSWORD=saf_password
      - POSTGRES_DB=security_audit_framework
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - saf-network

  # API Service
  api:
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: saf-api
    ports:
      - "8000:8000"
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://saf_user:saf_password@postgres:5432/security_audit_framework
    depends_on:
      - localstack
      - redis
      - postgres
    volumes:
      - ./src:/app/src
    networks:
      - saf-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # SAST Agent
  sast-agent:
    build:
      context: ./src/agents/sast
      dockerfile: Dockerfile
    container_name: saf-sast-agent
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - STRANDS_ENDPOINT=http://api:8000/strands
    depends_on:
      - api
    volumes:
      - ./src/agents/sast:/app
    networks:
      - saf-network

  # Container Scanner Agent
  container-scanner:
    build:
      context: ./src/agents/autonomous_container_scanner
      dockerfile: Dockerfile
    container_name: saf-container-scanner
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - STRANDS_ENDPOINT=http://api:8000/strands
    depends_on:
      - api
    volumes:
      - ./src/agents/autonomous_container_scanner:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - saf-network

  # Threat Intelligence Agent
  threat-intel:
    build:
      context: ./src/agents/autonomous_threat_intel
      dockerfile: Dockerfile
    container_name: saf-threat-intel
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - STRANDS_ENDPOINT=http://api:8000/strands
    depends_on:
      - api
    volumes:
      - ./src/agents/autonomous_threat_intel:/app
    networks:
      - saf-network

  # Supply Chain Agent
  supply-chain:
    build:
      context: ./src/agents/autonomous_supply_chain
      dockerfile: Dockerfile
    container_name: saf-supply-chain
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - STRANDS_ENDPOINT=http://api:8000/strands
    depends_on:
      - api
    volumes:
      - ./src/agents/autonomous_supply_chain:/app
    networks:
      - saf-network

  # Infrastructure Security Agent
  infra-security:
    build:
      context: ./src/agents/autonomous_infra_security
      dockerfile: Dockerfile
    container_name: saf-infra-security
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - STRANDS_ENDPOINT=http://api:8000/strands
    depends_on:
      - api
    volumes:
      - ./src/agents/autonomous_infra_security:/app
    networks:
      - saf-network

  # Development UI (optional)
  dev-ui:
    image: nginx:alpine
    container_name: saf-dev-ui
    ports:
      - "3000:80"
    volumes:
      - ./docs/ui:/usr/share/nginx/html
    networks:
      - saf-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: saf-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - saf-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: saf-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - saf-network

networks:
  saf-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: